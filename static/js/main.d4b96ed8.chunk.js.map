{"version":3,"sources":["overminder/actions/index.ts","constants.ts","overminder/effects/index.ts","overminder/index.ts","overminder/state/index.ts","utils.ts","components/LinkMessage.tsx","components/PushMessage.tsx","components/NoteMessage.tsx","pages/Main.tsx","routes.tsx","pages/Setting.tsx","components/NavLink.tsx","components/Sidebar.tsx","components/Header.tsx","App.tsx","serviceWorker.ts","theme.ts","index.tsx"],"names":["fetchAndSetAllPushes","context","a","accessToken","state","console","log","effects","getPushes","res","pushes","setAccessToken","value","localStorage","setItem","setMainUi","param","key","mainUi","onSidebarShow","onSidebarHide","initApp","headers","axios","get","constants","data","response","alert","error","message","config","isSidebarOpen","actions","useAppState","createStateHook","useActions","createActionsHook","createEffectsHook","createReactionHook","timestampToDateString","ts","d","Date","toLocaleDateString","getLang","toLocaleTimeString","undefined","navigator","languages","MessageTypes","LinkMessage","url","title","date","modified","borderWidth","w","borderRadius","p","borderColor","href","isExternal","color","fontSize","float","NoteMessage","body","PushMessage","props","type","link","note","MessageContainer","messages","maxW","Download","map","m","i","RefreshingContent","isIndeterminate","ROUTES","routes","path","exact","comp","px","defaultValue","onChange","useEffect","onRefresh","pullingContent","refreshingContent","NavLink","to","Component","history","useHistory","onClick","e","preventDefault","push","SettingButton","colorScheme","HomeButton","ClosingButton","className","ChevronLeft","Sidebar","isOpen","placement","onClose","zIndex","position","Header","onShowSidebar","flex","icon","ChevronRight","h","variant","aria-label","App","r","component","Boolean","window","location","hostname","match","breakpoints","createBreakpoints","sm","md","lg","xl","theme","extendTheme","overmind","createOvermind","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.d4b96ed8.chunk.js","sourcesContent":["import {Context} from '../../overminder';\nimport {StateType} from '../state';\n\nexport const fetchAndSetAllPushes = async (context: Context) => {\n  const {accessToken} = context.state;\n  console.log('fetchAndSetAllPushes',accessToken);\n  if(accessToken) {\n    const res = await context.effects.getPushes(accessToken);\n    console.log(res);\n    context.state.pushes = res?.pushes?? []\n  }\n};\n\nexport const setAccessToken = (context: Context, value: string) => {\n  context.state.accessToken = value;\n  localStorage.setItem('accessToken', value);\n};\n\ninterface SetMainUiParam {\n  key: keyof StateType['mainUi'];\n  value: StateType['mainUi'][keyof StateType['mainUi']];\n}\nexport const setMainUi = (context: Context, param: SetMainUiParam) => {\n  const {key, value} = param;\n  context.state.mainUi[key] = value;\n};\n\nexport const onSidebarShow = (context: Context) => {\n  setMainUi(context, {key: 'isSidebarOpen', value: true});\n};\n\nexport const onSidebarHide = (context: Context) => {\n  setMainUi(context, {key: 'isSidebarOpen', value: false});\n};\n\nexport const initApp = (context: Context) => {\n  context.state.accessToken = localStorage.accessToken;\n}\n","export default {\n  apiHost: 'https://api.pushbullet.com/v2'\n}\n","import axios from 'axios';\nimport constants from '../../constants';\nconst getPushes = async (accessToken: string) => {\n  const headers = {'Access-Token':accessToken}\n  try {\n    const res = await axios.get(`${constants.apiHost}/pushes`, {headers});\n    return res.data\n  }catch (error){\n    console.log(error.response)\n    alert(error.response.data.error.message)\n  }\n\n};\nexport {getPushes};\n","import {IContext} from 'overmind';\nimport {\n  createStateHook,\n  createActionsHook,\n  createEffectsHook,\n  createReactionHook,\n} from 'overmind-react';\nimport {state} from './state';\nimport * as actions from './actions';\nimport * as effects from './effects';\n\nexport const config = {\n  state,\n  actions,\n  effects\n};\n\nexport type Context = IContext<typeof config>;\n\nexport const useAppState = createStateHook<Context>();\nexport const useActions = createActionsHook<Context>();\nexport const useEffects = createEffectsHook<Context>();\nexport const useReaction = createReactionHook<Context>();\n","export interface StateType {\n  pushes: Array<any>;\n  accessToken: string;\n  mainUi: {\n    isSidebarOpen: boolean;\n  };\n}\nexport const state: StateType = {\n  pushes: [],\n  accessToken: '',\n  mainUi:{\n    isSidebarOpen: false,\n  }\n};\n","export function timestampToDateString(ts: number): string {\n  const d = new Date(ts * 1000);\n  return `${d.toLocaleDateString(getLang())}  ${d.toLocaleTimeString(getLang())}`;\n}\n\nfunction getLang() {\n  if (navigator.languages != undefined) return navigator.languages[0];\n}\n","import React from 'react';\nimport {MessageTypes} from './PushMessage';\nimport {Box, Center, Link, Text} from '@chakra-ui/react';\nimport {timestampToDateString} from '../utils';\n\nexport interface LinkMessageProps {\n  type: MessageTypes.link;\n  url: string;\n  title: string;\n  modified: number;\n}\n\nexport const LinkMessage = ({url, title, modified}: LinkMessageProps) => {\n  const date = timestampToDateString(modified);\n  return (\n    <Box borderWidth={1} w={'100%'} borderRadius={'lg'} p={'0.5em 1em'} borderColor={'blue.200'}>\n      <Link href={url} isExternal color={'blue.400'}>{url}</Link>\n      <Text>{title}</Text>\n      <Text fontSize={'xs'} float={'right'}>{date}</Text>\n    </Box>\n  );\n};\n","import React from 'react';\nimport {LinkMessage, LinkMessageProps} from './LinkMessage';\nimport {NoteMessage, NoteMessageProps} from './NoteMessage';\n\nexport enum MessageTypes {\n  link = 'link',\n  note = 'note',\n}\n\n\n\nexport type PushMessageProps = LinkMessageProps | NoteMessageProps;\n\nexport const PushMessage = (props: PushMessageProps) => {\n  switch (props.type) {\n    case MessageTypes.link:\n      return <LinkMessage {...props} />\n    case MessageTypes.note:\n      return  <NoteMessage {...props} />\n  }\n};\n","import React from 'react';\nimport {MessageTypes} from './PushMessage';\nimport {Box, Text} from '@chakra-ui/react';\nimport {timestampToDateString} from '../utils';\n\nexport interface NoteMessageProps {\n  type: MessageTypes.note;\n  body: string;\n  modified: number;\n}\n\nexport const NoteMessage = ({body, modified}: NoteMessageProps) => {\n  const date = timestampToDateString(modified);\n  return (\n    <Box\n      borderWidth={1}\n      w={'100%'}\n      borderRadius={'lg'}\n      p={'0.5em 1em'}\n      borderColor={'blue.100'}>\n      <Text>{body}</Text>\n      <Text fontSize={'xs'} float={'right'}>{date}</Text>\n    </Box>\n  );\n};\n","import React, {useEffect} from 'react';\nimport {Box, Center, CircularProgress, Container, Divider, Text, VStack} from '@chakra-ui/react';\nimport {useActions, useAppState} from '../overminder';\nimport {PushMessage, PushMessageProps} from '../components/PushMessage';\nimport PullToRefresh from 'react-simple-pull-to-refresh';\nimport {DownloadIcon} from '@chakra-ui/icons';\n\ninterface MessageContainerProps {\n  messages: Array<PushMessageProps>;\n}\n\nconst MessageContainer = ({messages}: MessageContainerProps) => {\n  return (\n    <VStack maxW={'100%'} p={'0.5em'}>\n      <Box w={'100%'}>\n        {/*<Divider />*/}\n        <Center>\n          <DownloadIcon/>\n          Pull down to refresh\n        </Center>\n      </Box>\n      {messages.map((m, i) => (\n        <PushMessage key={'push' + i} {...m} />\n      ))}\n    </VStack>\n  );\n};\n\nexport const RefreshingContent = ()=>(\n  <CircularProgress isIndeterminate color=\"green.300\" />\n)\nexport const Main = () => {\n  const {fetchAndSetAllPushes} = useActions();\n  const {pushes, accessToken} = useAppState();\n  useEffect(() => {\n    fetchAndSetAllPushes();\n  }, [accessToken]);\n  return (\n    <PullToRefresh onRefresh={fetchAndSetAllPushes} pullingContent={''} refreshingContent={<RefreshingContent />} >\n      <Container maxW={'100vw'}>\n        <MessageContainer messages={pushes} />\n      </Container>\n    </PullToRefresh>\n  );\n};\n","import {SettingPage} from './pages/Setting';\nimport React from 'react';\nimport {Main} from './pages/Main';\n\nexport const ROUTES = {\n  SETTING: '/setting',\n  MAIN: '/',\n};\n\ninterface RouteType {\n  path: typeof ROUTES[keyof typeof ROUTES];\n  exact: boolean;\n  comp: () => JSX.Element;\n}\nexport const routes: Array<RouteType> = [\n  {\n    path: ROUTES.SETTING,\n    exact: true,\n    comp: SettingPage,\n  },\n  {\n    path: ROUTES.MAIN,\n    exact: true,\n    comp: Main,\n  },\n];\n","import React from 'react';\nimport {\n  Box,\n  Editable,\n  EditableInput,\n  EditablePreview,\n  FormLabel,\n} from '@chakra-ui/react';\nimport {useActions, useAppState} from '../overminder';\nimport {setAccessToken} from '../overminder/actions';\n\nexport const SettingPage = () => {\n  const {accessToken} = useAppState();\n  const {setAccessToken} = useActions();\n  return (\n    <Box px={'0.5em'}>\n      <FormLabel>Access Token</FormLabel>\n      <Editable\n        borderColor={'teal'}\n        borderRadius={6}\n        borderWidth={1}\n        p={1}\n        defaultValue={accessToken || 'input here'}\n        onChange={setAccessToken}\n      >\n        <EditablePreview />\n        <EditableInput />\n      </Editable>\n    </Box>\n  );\n};\n","import {useHistory} from 'react-router-dom';\nimport React, {MouseEventHandler} from 'react';\n\ninterface LinkProps {\n  to: string;\n  Component: React.ComponentType<any>;\n}\nexport const NavLink = ({to, Component}: LinkProps) => {\n  const history = useHistory();\n  const handleClick: MouseEventHandler = (\n    e: React.MouseEvent<HTMLInputElement>,\n  ) => {\n    e.preventDefault();\n    history.push(to);\n  };\n  return <Component onClick={handleClick} />;\n};\n","import React, {MouseEventHandler} from 'react';\nimport {\n  Button,\n  Drawer,\n  DrawerBody,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerHeader,\n  DrawerOverlay,\n  VStack,\n} from '@chakra-ui/react';\nimport {ROUTES} from '../routes';\nimport {NavLink} from './NavLink';\nimport {ChevronLeftIcon} from '@chakra-ui/icons';\nimport \"../scss/sidebar.scss\";\n\ninterface SidebarProps {\n  isSidebarOpen: boolean;\n  onSidebarHide: () => void;\n}\n\ninterface ButtonProps {\n  onClick: MouseEventHandler;\n}\n\nconst SettingButton = ({onClick}: ButtonProps) => (\n  <Button colorScheme={'whatsapp'} onClick={onClick} w=\"100%\">\n    Setting\n  </Button>\n);\nconst HomeButton = ({onClick}: ButtonProps) => (\n  <Button colorScheme={'whatsapp'} onClick={onClick} w=\"100%\">\n    Home\n  </Button>\n);\n\n\nconst ClosingButton = ({onClick, }:ButtonProps) =>(\n  <div onClick={onClick} className={'sidebarCloseBtn'}>\n    <ChevronLeftIcon fontSize={'3em'}/>\n  </div>\n)\n\nconst Sidebar = ({isSidebarOpen, onSidebarHide}: SidebarProps) => {\n  return (\n    <>\n      <Drawer isOpen={isSidebarOpen} placement=\"left\" onClose={onSidebarHide}>\n        <DrawerOverlay>\n          <DrawerContent>\n            {/*<DrawerCloseButton />*/}\n            {/*<DrawerHeader></DrawerHeader>*/}\n            <DrawerBody>\n              <VStack zIndex={1} position={'relative'}>\n                <NavLink to={ROUTES.MAIN} Component={HomeButton} />\n                <NavLink to={ROUTES.SETTING} Component={SettingButton} />\n              </VStack>\n              <ClosingButton onClick={onSidebarHide}/>\n            </DrawerBody>\n          </DrawerContent>\n        </DrawerOverlay>\n      </Drawer>\n    </>\n  );\n};\n\nexport default Sidebar;\n","import React, {MouseEventHandler} from 'react';\nimport {Flex, Box, useTheme, IconButton, Center, Text, Heading} from '@chakra-ui/react';\nimport {ChevronRightIcon} from '@chakra-ui/icons';\n\ninterface HeaderProps {\n  isSidebarOpen: boolean,\n  onShowSidebar: MouseEventHandler<HTMLButtonElement>\n}\nconst Header = ({isSidebarOpen,onShowSidebar}:HeaderProps) => {\n\n  return (\n    <Flex>\n      <Box flex={1}>\n        { isSidebarOpen ||\n          <IconButton\n            icon={<ChevronRightIcon w={8} h={8} />}\n            colorScheme=\"whatsapp\"\n            variant=\"outline\"\n            onClick={onShowSidebar}\n            aria-label={''}\n          />\n        }\n      </Box>\n      <Center flex={2.5} h=\"3em\">\n        <Heading color={'green'} fontSize=\"lg\">Pushbullet PWA (unofficial)</Heading>\n      </Center>\n      <Box flex={1}/>\n    </Flex>\n  );\n};\n\nexport default Header;\n","import React, {useEffect} from 'react';\n// import './App.css';\nimport Sidebar from './components/Sidebar';\nimport {Box} from '@chakra-ui/react';\nimport Header from './components/Header';\nimport {useActions, useAppState} from './overminder';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\nimport {routes} from './routes';\nfunction App() {\n  const {mainUi} = useAppState();\n  const {onSidebarShow, onSidebarHide,initApp} = useActions();\n  useEffect(()=>{\n    initApp()\n  },[]);\n  return (\n    <BrowserRouter>\n      <Sidebar\n        isSidebarOpen={mainUi.isSidebarOpen}\n        onSidebarHide={onSidebarHide}\n      />\n      <Box>\n        <Header\n          onShowSidebar={onSidebarShow}\n          isSidebarOpen={mainUi.isSidebarOpen}\n        />\n      </Box>\n      <Switch>\n        {routes.map((r, i) => (\n          <Route\n            key={'route_' + i}\n            path={r.path}\n            exact={r.exact}\n            component={r.comp}\n          />\n        ))}\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { extendTheme } from '@chakra-ui/react'\nimport { createBreakpoints } from '@chakra-ui/theme-tools'\n\nconst breakpoints = createBreakpoints({\n  sm: '30em',\n  md: '48em',\n  lg: '62em',\n  xl: '80em',\n  '2xl': '96em',\n})\n\nconst theme = extendTheme({\n  breakpoints,\n})\n\nexport default theme\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createOvermind} from 'overmind';\nimport {Provider} from 'overmind-react';\nimport {config} from './overminder';\nimport theme from './theme';\nimport {ChakraProvider} from '@chakra-ui/react';\n\nconst overmind = createOvermind(config);\n\nReactDOM.render(\n  <Provider value={overmind}>\n    <ChakraProvider theme={theme}>\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    </ChakraProvider>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}